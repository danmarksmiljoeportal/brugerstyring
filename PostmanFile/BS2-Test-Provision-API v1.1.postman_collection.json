{
	"info": {
		"_postman_id": "138a5c11-9b9a-48e8-a0fe-ff1b526e2d00",
		"name": "BS2-Test-Provision-API v1.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23299093"
	},
	"item": [
		{
			"name": "Preparation",
			"item": [
				{
					"name": "Setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * Setup the test\r",
									" * - Get access token to connect to external API\r",
									" * - Initialize temporary variables (with prefix Temp_) that will be used in Test\r",
									" */\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// set the access token\r",
									"var jsonBody = JSON.parse(responseBody);\r",
									"pm.setVariable(\"Temp_Access_Token\", jsonBody.access_token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');\r",
									"\r",
									"// INITIALIZE TEMP VARIABLES\r",
									"const Email_MaxLength = 255;\r",
									"const FirstName_MaxLength = 255;\r",
									"const LastName_MaxLength = 255;\r",
									"const ExternalUserId_MaxLength = 128;\r",
									"\r",
									"// set user's variables\r",
									"const id = new Date().getTime();\r",
									"const emailPrefix = pm.collectionVariables.get(\"Email_Prefix\");\r",
									"const roleExpiryDate = new Date();\r",
									"roleExpiryDate.setDate(roleExpiryDate.getDate() + 3);\r",
									"\r",
									"// data for success cases\r",
									"pm.setVariable(\"Temp_User_Email\", `${emailPrefix}${id}@email.com`);\r",
									"pm.setVariable(\"Temp_User_FirstName\", `First ${utils.generateRandomString(10)}`);\r",
									"pm.setVariable(\"Temp_User_LastName\", `Last ${utils.generateRandomString(10)}`);\r",
									"pm.setVariable(\"Temp_User_ExternalId\", id);\r",
									"pm.setVariable(\"Temp_Role_Expiry\", roleExpiryDate.toISOString());\r",
									"\r",
									"// data for failed cases\r",
									"pm.setVariable(\"Temp_Application_Id_NotExist\", uuid.v4());\r",
									"\r",
									"pm.setVariable(\"Temp_RoleId_NotExist\", uuid.v4());\r",
									"\r",
									"pm.setVariable(\"Temp_User_Email_Invalid\", \"not-an-email-address\");\r",
									"pm.setVariable(\"Temp_User_Email_TooLong\", utils.generateRandomString(Email_MaxLength) + \"@email.com\");\r",
									"\r",
									"pm.setVariable(\"Temp_User_FirstName_TooLong\", utils.generateRandomString(FirstName_MaxLength) + 1);\r",
									"\r",
									"pm.setVariable(\"Temp_User_LastName_TooLong\", utils.generateRandomString(LastName_MaxLength) + 1);\r",
									"\r",
									"pm.setVariable(\"Temp_User_ExternalId_NotExist\", id + 1);\r",
									"pm.setVariable(\"Temp_User_ExternalId_TooLong\", utils.generateRandomString(ExternalUserId_MaxLength) + 1);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "{{IDP_grant_type}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{IDP_client_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{IDP_client_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{IDP_URL}}/runtime/oauth2/token.idp",
							"host": [
								"{{IDP_URL}}"
							],
							"path": [
								"runtime",
								"oauth2",
								"token.idp"
							]
						}
					},
					"response": []
				}
			],
			"description": "Get access token and initialize temporary variables"
		},
		{
			"name": "Success - GET Endpoints",
			"item": [
				{
					"name": "Test GET /users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test GET /users endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" *  - has user data\r",
									" **/\r",
									"\r",
									" pm.expectSuccessWithData();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test GET /roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test GET /roles endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" *  - has role data\r",
									" **/\r",
									"\r",
									"pm.expectSuccessWithData();\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.setVariable(\"Temp_RoleId\", data[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/roles",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test GET /applications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test GET /applications endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" *  - has application data\r",
									" **/\r",
									"\r",
									"pm.expectSuccessWithData(pm);\r",
									"\r",
									"var data = pm.response.json();\r",
									"pm.setVariable(\"Temp_Application_Id\", data[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/applications",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"applications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test GET /applications/{applicationId}/roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test GET /applications/{applicationid}/roles endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" **/\r",
									"\r",
									"pm.expectSuccess();\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/applications/{{Temp_Application_Id}}/roles",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"applications",
								"{{Temp_Application_Id}}",
								"roles"
							]
						}
					},
					"response": []
				}
			],
			"description": "Ensure GET endpoints work"
		},
		{
			"name": "Success - Create User And Role",
			"item": [
				{
					"name": "Test POST /users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" *  - user data is returned\r",
									" **/\r",
									"\r",
									"pm.expectSuccess();\r",
									"\r",
									"pm.test(\"Response is json has 1 record\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    pm.expect(pm.response.json().length).to.eql(1);\r",
									"});\r",
									"\r",
									"// Initialize temp variables\r",
									"var jsonBody = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"Temp_User_Id\", jsonBody[0].id);\r",
									"pm.collectionVariables.set(\"Temp_Organization_Id\", jsonBody[0].organizationId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate User Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * get user from /users endpoint\r",
									" * expect:\r",
									" *  - returned data contain newly created user\r",
									" **/\r",
									"\r",
									" pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json and has data\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    var data = pm.response.json();\r",
									"    var userId = pm.collectionVariables.get(\"Temp_User_Id\");\r",
									"    var user = data.find(u => u.id == userId);\r",
									"\r",
									"    pm.expect(user).to.be.an(\"object\", \"Could not find the created user\");\r",
									"    pm.expect(user.id).not.to.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate User Has No Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * validate new user has no role assigned\r",
									" * expect:\r",
									" *  - 200 status\r",
									" *  - user's role is empty\r",
									" **/\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json and has NO data\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}/role-assignments",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}",
								"role-assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test PUT /users/{externalId}/role-assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test PUT /users/{external-id}/role-assignments endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" **/\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userRoleAssignments\": [\r\n        {\r\n            \"roleId\": \"{{Temp_RoleId}}\",\r\n            \"expirationTime\": \"{{Temp_Role_Expiry}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}/role-assignments",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}",
								"role-assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate User Has 1 Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * validate that the role is assigned to user in previous step successfully\r",
									" * expect:\r",
									" *  - 200 status\r",
									" *  - user has 1 role, and the roleId match the role assigned\r",
									" **/\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json and has 1 record\", function(){\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    var roleId = pm.collectionVariables.get(\"Temp_RoleId\");\r",
									"\r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data.length).to.eql(1);\r",
									"    pm.expect(data[0].role.id).to.eql(roleId);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}/role-assignments",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}",
								"role-assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test DELETE /users/{externalId}/role-assignments/{roleId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test DELETE /users/{external-id}/role-assignments/{role-id} endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" **/\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}/role-assignments/{{Temp_RoleId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}",
								"role-assignments",
								"{{Temp_RoleId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate User Has No Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * validate that the role is removed from user successfully in previous step\r",
									" * expect:\r",
									" *  - 200 status\r",
									" *  - user has no role\r",
									" **/\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json and has NO data\", function() {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    var data = pm.response.json();\r",
									"    pm.expect(data).to.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}/role-assignments",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}",
								"role-assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test DELETE /users/{externalId}",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test DELETE /users/{external-id} endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" **/\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate User Deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * validate that the user is deleted successfully in previous step\r",
									" * expect:\r",
									" *  - user is deleted\r",
									" **/\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is json and has NO data\", function() {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    var data = pm.response.json();\r",
									"    var userId = pm.collectionVariables.get(\"Temp_User_Id\");\r",
									"    var user = data.find(u => u.id == userId);\r",
									"    \r",
									"    pm.expect(user).to.be.undefined;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "- Create user\n- Assign role to user\n- Remove role from user\n- Delete user"
		},
		{
			"name": "Failed - General Validations",
			"item": [
				{
					"name": "Failed - No Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test authorization\r",
									" * expect:\r",
									" *  - 401 status\r",
									" **/\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Get Application Role - Id Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test GET /applications endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"Application\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/applications/{{Temp_Application_Id_NotExist}}/roles",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"applications",
								"{{Temp_Application_Id_NotExist}}",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Delete User - External Id - Not Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test DELETE /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"User\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId_NotExist}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId_NotExist}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Failed - Create User",
			"item": [
				{
					"name": "Failed - Create User - External Id - Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'External User Id' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - External Id - Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'External User Id' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": null\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - External Id - Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"The length of 'External User Id' must be 128 characters or fewer. You entered 129 characters.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId_TooLong}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - Email - Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'Email' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - Email - Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'Email' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": null,\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - Email - Invalid Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'Email' is not in the correct format.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email_Invalid}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - Email - Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"Email\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email_TooLong}}\",\r\n\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - FirstName - Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'First Name' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - FirstName - Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'First Name' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": null,\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - FirstName - Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"The length of 'First Name' must be 255 characters or fewer. You entered 256 characters.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName_TooLong}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - LastName - Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'Last Name' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - LastName - Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'Last Name' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": null,\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - LastName - Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"LastName\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName_TooLong}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			],
			"description": "Failed validation on creating user"
		},
		{
			"name": "Failed - Update User",
			"item": [
				{
					"name": "Success - Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" *  - user data is returned\r",
									" **/\r",
									"\r",
									"pm.expectSuccess();\r",
									"\r",
									"pm.test(\"Response is json has 1 record\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    \r",
									"    pm.expect(pm.response.json().length).to.eql(1);\r",
									"});\r",
									"\r",
									"// Initialize temp variables\r",
									"var jsonBody = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"Temp_User_Id\", jsonBody[0].id);\r",
									"pm.collectionVariables.set(\"Temp_Organization_Id\", jsonBody[0].organizationId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Create User - Email Existed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"Email already exists\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"email\": \"{{Temp_User_Email}}\",\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\",\r\n            \"externalUserId\": \"{{Temp_User_ExternalId}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Update User - ExternalId - Not Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test POST /users endpoint\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"ExternalUserId\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{Temp_User_FirstName}}\",\r\n    \"lastName\": \"{{Temp_User_LastName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId_NotExist}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId_NotExist}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Update User - FirstName - Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test PUT /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'First Name' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"firstName\": \"\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Update User - FirstName - Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test PUT /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'First Name' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"firstName\": null,\r\n            \"lastName\": \"{{Temp_User_LastName}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Update User - FirstName - Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test PUT /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"FirstName\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"firstName\": \"{{Temp_User_FirstName_TooLong}}\",\r\n            \"lastName\": \"{{Temp_User_LastName}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Update User - LastName - Empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test PUT /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'Last Name' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Update User - LastName - Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test PUT /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"'Last Name' must not be empty.\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": null\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Update User - LastName - Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test PUT /users endpoint with invalid input\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"LastName\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"users\": [\r\n        {\r\n            \"firstName\": \"{{Temp_User_FirstName}}\",\r\n            \"lastName\": \"{{Temp_User_LastName_TooLong}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Assign Role - Role Not Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test PUT /users/{external-id}/role-assignments endpoint with not-exist roleId\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"Role\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userRoleAssignments\": [\r\n        {\r\n            \"roleId\": \"{{Temp_RoleId_NotExist}}\",\r\n            \"expirationTime\": \"{{Temp_Role_Expiry}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}/role-assignments",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}",
								"role-assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Failed - Delete User Role - Role Not Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test PUT /users/{external-id}/role-assignments endpoint with not-exist roleId\r",
									" * expect:\r",
									" *  - 400 status\r",
									" **/\r",
									"\r",
									"pm.expectError400();\r",
									"\r",
									"pm.expectResponseContains(\"Role\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}/role-assignments/{{Temp_RoleId_NotExist}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}",
								"role-assignments",
								"{{Temp_RoleId_NotExist}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success - Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * test DELETE /users/{external-id} endpoint\r",
									" * expect:\r",
									" *  - 200 status\r",
									" **/\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{Temp_Access_Token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/users/{{Temp_User_ExternalId}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"users",
								"{{Temp_User_ExternalId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Create an user success then test failed cases for updating user"
		},
		{
			"name": "Tear Down",
			"item": [
				{
					"name": "Tear Down",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**\r",
									" * clear all temporary variables\r",
									" **/\r",
									" \r",
									"var data = pm.collectionVariables.toJSON();\r",
									"\r",
									"for(var i=0; i < data.values.length; i++){\r",
									"    var key = data.values[i].key;\r",
									"\r",
									"    if (key.startsWith(\"Temp\")){\r",
									"        console.log(`- Remove key '${key}': ${pm.collectionVariables.get(key)}`);\r",
									"        pm.collectionVariables.unset(key);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://google.com",
							"protocol": "https",
							"host": [
								"google",
								"com"
							]
						}
					},
					"response": []
				}
			],
			"description": "Remove all temporary variables and test data"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    generateRandomString: function(length) {",
					"        var result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        var counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}",
					"",
					"// global functions: extensions for postman (pm)",
					"Object.prototype.setVariable = function(key, value) {",
					"    console.log(`- Set variable '${key}': ${value}`);",
					"    this.collectionVariables.set(key, value);",
					"};",
					"",
					"Object.prototype.expectSuccess = function() {",
					"    var pm = this;",
					"    pm.test(\"Response is success, in json format\", function(){",
					"        pm.response.to.be.ok;",
					"        pm.response.to.be.withBody;",
					"        pm.response.to.be.json;",
					"    });",
					"};",
					"",
					"Object.prototype.expectSuccessWithData = function() {",
					"    var pm = this;",
					"    pm.test(\"Response is success, in json format and has data\", function(){",
					"        pm.response.to.be.ok;",
					"        pm.response.to.be.withBody;",
					"        pm.response.to.be.json;",
					"        ",
					"        pm.expect(pm.response.json()).not.to.be.empty;",
					"    });",
					"};",
					"",
					"Object.prototype.expectError400 = function() {",
					"    var pm = this;",
					"    pm.test(\"Status code is 400, response has data and is json\", function () {",
					"        pm.response.to.have.status(400);",
					"        pm.response.to.be.withBody;",
					"        pm.response.to.be.json;",
					"    });",
					"};",
					"",
					"Object.prototype.expectResponseContains = function(value) {",
					"    if (!value) {",
					"        console.warn(\"expectResponseContains: input value is empty\");",
					"        return;",
					"    }",
					"",
					"    var pm = this;",
					"    pm.test(`Response contains '${value}'`, function() {",
					"        var responseText = pm.response.text();",
					"        pm.expect(responseText).include(value);",
					"    });",
					"};",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL_UDV",
			"value": "https://b0802-udv-external-backend-app.azurewebsites.net",
			"type": "string",
			"disabled": true
		},
		{
			"key": "BASE_URL_TEST",
			"value": "https://b0802-test-external-backend-app.azurewebsites.net",
			"type": "string",
			"disabled": true
		},
		{
			"key": "BASE_URL_PROD",
			"value": "https://b0802-prod-external-backend-app.azurewebsites.net",
			"type": "string",
			"disabled": true
		},
		{
			"key": "IDP_URL_TEST",
			"value": "https://dev.test.miljoeportal.dk",
			"type": "string",
			"disabled": true
		},
		{
			"key": "IDP_URL_PROD",
			"value": "https://dev.test.miljoeportal.dk",
			"type": "string",
			"disabled": true
		},
		{
			"key": "BASE_URL",
			"value": "https://b0802-udv-external-backend-app.azurewebsites.net",
			"type": "string"
		},
		{
			"key": "IDP_URL",
			"value": "https://dev.test.miljoeportal.dk",
			"type": "string"
		},
		{
			"key": "IDP_client_id",
			"value": "{{yourt_client_id}}",
			"type": "string"
		},
		{
			"key": "IDP_client_secret",
			"value": "{{yourt_client_secret}}",
			"type": "string"
		},
		{
			"key": "IDP_grant_type",
			"value": "client_credentials",
			"type": "string"
		},
		{
			"key": "Email_Prefix",
			"value": "gt_",
			"type": "string"
		}
	]
}